{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FIRO","text":"![logo.png](){: style=\"height: 150px\"}  <p> FIRO (FLASH Inspection Rover, also known as Facility Inspection Rover) </p> <p>Technical Documentation: https://rxsio.github.io/firo-docs/</p> <p>User Manual: https://rxsio.github.io/firo-user-manual</p> <p></p> <p>FIRO is a mobile robot designed to operate in environments where human presence is restricted due to hazardous radiation levels. It is a student project developed mostly during Erasmus internships at the FLASH particle accelerator at DESY (hence the name of the robot). FIRO's capabilities are primarily driven by FLASH demands and requirements.</p>"},{"location":"#objectives","title":"Objectives","text":"<ul> <li>Radiation Measurements   Measuring radiation levels throughout the accelerator tunnel to detect and pinpoint anomalies, particularly sources of radiation scattering. Essentially, this generates a high-resolution map of radiation along the accelerator, as an alternative to data from a few radiation sensors at designated locations. Such capability is valuable because scattering sources negatively affect beam quality.</li> </ul> <ul> <li>Real-Time Monitoring   Providing a live camera stream to enable on-demand monitoring of the accelerator's machinery. This is especially useful during the commissioning process when the correct operation of the new equipment has to be confirmed, often by visual monitoring.</li> </ul> <ul> <li>Incident Response   Providing a local view in case of incidents such as gas leaks. This is important because the accelerator tunnel cannot be accessed immediately by personnel after an incident occurs. First, the accelerator has to be shut down, and conditions in the tunnel have to be confirmed in case additional safety precautions are necessary. By providing an immediate local view, the incident can be diagnosed faster, leading to quicker repairs and shorter accelerator downtime.</li> </ul>"},{"location":"#additional-functionalities","title":"Additional Functionalities","text":"<p>The FIRO robot has additional capabilities that are not specific to the needs of restricted access environments, however, they are still desired at FLASH.  </p> <ul> <li>Virtual Tour   Utilizing a 360-degree camera to update virtual tours of the FLASH tunnel. This functionality is used to automate a process currently performed by humans. During FLASH development, virtual tours are used to document progress and particularly to provide detailed information on the current status of FLASH through imagery. Automating this task can lead to several improvements:  <ul> <li>Improved repeatability allowing better visual difference comparison (such differences can be automatically highlighted).  </li> <li>Better spatial resolution: Virtual Tours can be updated much faster by the robot, hence if desired, the 360 photos can be taken more densely with no additional cost as long as the robot is not swamped by other tasks.  </li> <li>Better temporal resolution: Virtual Tours could also be updated more often, or even on-demand, after someone applies key modifications to the accelerator or when someone needs to confirm the current status of the FLASH development.  </li> </ul> </li> </ul>"},{"location":"environment/","title":"Environment","text":"<p>Expand</p> <p>This section needs additional information</p>"},{"location":"specification/","title":"General Specification","text":""},{"location":"specification/#component-overview","title":"Component Overview","text":"<ol> <li>(A, B) Battery Packs - 2 x 127Wh</li> <li>(A, B, C, D) Wheel BLDC Motors</li> <li>Power Management Module</li> <li>Placeholder for Future Use - Currently designed to hold a Raspberry Pi 3</li> <li>(A, B) BLDC Motor Drivers - ODrive v3.6</li> <li>USB Hub - 2 x 4 ports</li> <li>Onboard Computer - Jetson Nano</li> <li>Charging Module</li> </ol> Outdated <p>Outdated information:</p> <ul> <li>Raspberry PI 3 is not planned anymore</li> <li>Onboard computer replacement to ASUS NUC</li> </ul> <p>Missing:</p> <ul> <li>description for battery Packs</li> <li>description for BLDC motors</li> <li>description for power management module</li> <li>description for charging module</li> </ul>"},{"location":"specification/#component-layout","title":"Component Layout","text":"<p>  (1) </p> <ol> <li>Onboard Computer</li> </ol> Outdated <p>Requires update</p> <p>Top View Photo for Reference</p> <p></p> Outdated <p>Requires update</p>"},{"location":"specification/#mechanical-design","title":"Mechanical Design","text":"<ul> <li> <p>Dimensions: </p> <ul> <li>Width: 42.5 cm</li> <li>Length: 56.5 cm   </li> </ul> <p>Additional context: </p> <ul> <li>The distance between the front and back wheels is equal to the distance between the left and right wheels (wheel track = wheel base = 40cm).   </li> <li>The platform fits within a circle with a diameter of 71cm, allowing it to easily turn, even when passing through a standard door frame (80cm width).  </li> </ul> </li> </ul> <ul> <li>Mobility: The rover is a 4-wheel differential robot, which means it can turn in place but cannot drive sideways.</li> <li>Wheels: Each wheel has a radius of 8.25 cm and is powered by an industrial BLDC motor. These motors provide a nominal torque of 2.5 Nm and can peak at 7.5 Nm, operating at 71 rpm nominally. The motors are operated at a higher voltage than nominal (24V), therefore the actual operating speed is higher. </li> <li>Speed: The robot is capable of reaching speeds slightly above 1m/s, however, for safety, it is limited to 1 m/s both in rover software and in wheel motor drivers' configuration.  </li> </ul>"},{"location":"specification/#power-system","title":"Power System","text":"<ul> <li>Battery Specifications:      - Nominal voltage: 36.4V (10s configuration)     - Nominal capacity: 254 Wh</li> <li>Charging: At the front of the robot, deployable probes are used for connecting to a custom-made flat charging station. Alternatively, a charger can be manually connected to the XT60 plug located in the power management module.</li> <li>Power Management Module: Located at the back of the robot, this module is responsible for distributing battery power. Besides directly powering output ports, it includes handling an emergency button, overvoltage and overcurrent protection, and voltage converters (5, 12, and 24V).</li> </ul> Outdated <p>Outdated:</p> <ul> <li>power management module description</li> </ul>"},{"location":"specification/#control-and-communication-systems","title":"Control and Communication Systems","text":"<ul> <li>Onboard Computer: Jetson Nano</li> <li>Software Framework: ROS Noetic</li> <li>Periphery Interfaces:     Peripherals can use USB 2, USB 3, or CAN for communication with the onboard computer. Below is outlined what interfaces are currently used by the rover's equipment:     - Webcams: USB 2     - Depth camera: USB 3     - 360-degree camera: USB 3     - Motor drivers: USB 2, but in the future will use CAN     - Charging module: Not supported yet, will use CAN     - RadCon: Not supported yet, will use USB 2</li> <li>Motor Drivers: ODrive v3.6</li> <li>Remote Connectivity: Wi-Fi 2.4GHz and 5GHz Additional context: Standard USB stick antenna is used. High-powered antennas are restricted within FLASH. However, the network coverage is supported by the facility's infrastructure. In areas with weak coverage, a dedicated team works to enhance connectivity.</li> </ul> Outdated <p>Outdated:</p> <ul> <li>onboard computer</li> <li>software framework</li> </ul>"},{"location":"Cameras/Architecture/","title":"Architecture","text":""},{"location":"Cameras/Architecture/#basics","title":"Basics","text":"<p>Our camera system is based around the Gstreamer framework, which allows for easy adaptation to new hardware, gives us good performance and is widely supported.</p> <p>Video is provided by various USB webcams communicating using the v4l2 libraries in Linux.</p> <p>The streams are delivered to the user using WebRTC and displayed in the <code>robot-web-interface</code></p> <p>The entire system is running inside of a Docker container for easy portability and stable deployment (which has been a major issue in the past).</p>"},{"location":"Cameras/Architecture/#structure","title":"Structure","text":"<p>The camera system is separated into 3 components working together</p> <ul> <li>The <code>robot-web-interface</code> displaying streams</li> <li>The signaling server coordinating the webrtc streams</li> <li>The python script <code>pipelines.py</code> automatically detecting cameras and starting gstreamer pipelines, which connect to the signaling server </li> </ul> <p>Currently, the docker is running the default frontend from gstwebrtc-api as a fallback for testing, but it will be removed in the future.</p>"},{"location":"Cameras/Camera%20rotation/","title":"Camera rotation","text":""},{"location":"Cameras/Camera%20rotation/#setup","title":"Setup","text":""},{"location":"Cameras/Camera%20rotation/#install-adb","title":"Install adb","text":"<p>Simply install adb using the builtin package manager</p> <pre><code>sudo apt install adb\n</code></pre>"},{"location":"Cameras/Camera%20rotation/#enable-adb-support","title":"Enable adb support","text":"<p>Create file <code>/etc/udev/rules.d/51-android.rules</code> with content:</p> <pre><code>SUBSYSTEM==\"usb\", ATTR{idVendor}==\"05a3\", ATTR{idProduct}==\"9331\", MODE=\"0666\", GROUP=\"plugdev\"\n</code></pre> <p>This is necessary for the camera to be recognized by adb as a valid device.</p>"},{"location":"Cameras/Camera%20rotation/#operation","title":"Operation","text":""},{"location":"Cameras/Camera%20rotation/#motor_init","title":"motor_init","text":"<p>The camera has an initialization sequence, that resets its rotation to the middle point. It can be executed with</p> <pre><code>adb shell motor_init\n</code></pre>"},{"location":"Cameras/Camera%20rotation/#motor_rotate","title":"motor_rotate","text":"<p>The full range of motion of the camera appears to be divided into 4096 steps. We can rotate the camera relative to the current position using </p> <pre><code>adb shell motor_rotate {steps}\n</code></pre> <p>Where <code>{steps}</code> is the number of steps we want to make. This value can be negative. If the exceeds the range of motion of the camera, it will hit the endstop, which should be avoided.</p> <p>There is no builtin support for absolute positioning.</p>"},{"location":"Cameras/Camera%20rotation/#multiple-cameras","title":"Multiple cameras","text":"<p>All of the cameras have identical USB parameters, including the serial number, which makes them seemingly impossible to use with adb simultaneously.</p> <p>However, adb has a <code>-t</code> option, which allows us to select devices using their transport ids, which are always unique (but change every time you plug in a device).</p> <p>Current transport ids can be acquired with</p> <pre><code>adb devices -l\n</code></pre>"},{"location":"Cameras/Docker%20container/","title":"Docker container","text":""},{"location":"Cameras/Docker%20container/#dependencies","title":"Dependencies","text":"<p>Unfortunately, this container depends on a lot of libraries, which leads to a significant image size, but none of them seem avoidable.</p> <ul> <li><code>vim</code> is useful for quickly patching files </li> </ul> <ul> <li><code>git curl</code> are necessary for downloading rust and gst-plugins-rs</li> </ul> <ul> <li><code>python3-yaml python3-pyudev python3-psutil udev</code> are necessary for the pipeline python script</li> </ul> <ul> <li><code>build-essential libssl-dev libx264-dev libvpx-dev libopus-dev</code> are necessary for building gst-plugins-rs</li> </ul> <ul> <li><code>libnice-dev gstreamer1.0-nice</code> these aren't mentioned anywhere in the docs and no errors show it is missing, but it is necessary for webrtcsink to function at all</li> </ul> <ul> <li><code>libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav</code> these are basic gstreamer dependencies, maybe some of them could be removed</li> </ul> <ul> <li><code>gstreamer1.0-tools python3-gst-1.0</code> are necessary for starting pipelines</li> </ul> <p>Additionally, we might need to add <code>mesa-va-drivers gstreamer1.0-vaapi va-driver-all</code> for hardware accelerated video decoding, but currently it doesn't work at all.</p>"},{"location":"Cameras/Docker%20container/#build-stages","title":"Build stages","text":"<ol> <li> <p>Install all the dependencies</p> </li> <li> <p>Install nvm for the gstwebrtc-api frontend</p> </li> <li> <p>Install rustup for building gst-plugins-rs</p> </li> <li> <p>Download gst-plugins-rs</p> </li> <li> <p>Install dependencies for gstwebrtc-api</p> </li> <li> <p>Build <code>webrtc</code>, <code>webrtc/signalling</code> and <code>rtp</code> parts of gst-plugins-rs, so we have binaries ready to run</p> </li> <li> <p>Copy scripts to the container and make them executable</p> </li> </ol>"},{"location":"Cameras/Docker%20container/#interfaces","title":"Interfaces","text":"<p>The config file is loaded from <code>./config/config.yaml</code> relative to the folder where the repository has been cloned.</p> <p>The signaler server runs on port <code>8443</code> which is mapped to the same port on the host machine.</p> <p>In order to allow udev and pyudev to work properly, folders <code>/dev</code> and <code>run/udev</code> have to be mapped from the host machine. Setting the <code>network_mode</code> to <code>host</code> is required as well for some reason.</p> <p>The container is privileged to give it full hardware access.</p> <p>The <code>restart: unless-stopped</code> clause is part of the workaround for the pipeline crashing issue, but it is a failsafe as well.</p>"},{"location":"Cameras/Gstreamer/","title":"Gstreamer","text":"<p>Support for WebRTC in Gstreamer is new and constantly changing, so we have to adapt to the latest changes done to the module that we are using.</p> <p>We are using the webrtcsink node provided by the gst-plugins-rs project. Unfortunately, it is not shipped with Ubuntu, so we have to build it ourselves.</p> <p>We are using a container with Ubuntu 23.04, because we need Gstreamer 1.22.x. Once Ubuntu 24.04 is released, we should update.</p> <p>The Pipelines are managed with a python script.</p>"},{"location":"Cameras/Known%20issues/","title":"Known issues","text":""},{"location":"Cameras/Known%20issues/#usb20-bandwidth-limit","title":"USB2.0 bandwidth limit","text":"<p>USB2.0 allows for only 500Mbit/s transfer rate and only 80% of it can be used for streaming video. This normally wouldn't be a problem, because of video compression, but webcams are dump and massively over provision the bandwidth they need.</p> <p>To fix this, a UVC kernel patch is required.</p>"},{"location":"Cameras/Known%20issues/#segmentation-fault-with-python-pipelines","title":"Segmentation fault with python pipelines","text":"<p>For an unknown reason, when a stream is started and stopped a couple of times on the frontend, the pipeline throws a segmentation fault. </p> <p>Strangely enough, it doesn't happen when using a pipeline started with <code>gst-launch</code>. (edit: I have managed to crash a pipeline started with gst-launch when running directly with Ubuntu 23.04)</p> <p>I was not able to prevent it from happening by making changes to the frontend.</p> <p>The current workaround is to restart the container if the crash occurs. This leads to a ~5s break in the stream, which isn't terrible, but undesirable.</p> <p>A bug report has been filed to the developers of webrtcsink .</p>"},{"location":"Cameras/Known%20issues/#hardware-acceleration","title":"Hardware acceleration","text":"<p>Despite many efforts, I can't get hardware acceleration to work. Installing libraries for it leads to encoding failing inside webrtcsink. Hardware acceleration (under AMD) worked perfectly fine with previous setups that didn't use a docker container. This has to be investigated further.</p> <p>Using the GPU inside Jetson Nano might not be possible, because nVidia released specific versions of Gstreamer modules for their hardware. Unfortunately those modules were released only for Ubuntu 18.04, which has an ancient version of Gstreamer. However, it is worth trying installing the CUDA drivers in the container and testing if it will work.</p>"},{"location":"Cameras/Pipelines/","title":"Pipelines","text":""},{"location":"Cameras/Pipelines/#automatic-camera-detection","title":"Automatic camera detection","text":"<p>The pyudev library is used to allow for hotplug support. Cameras are detected by filtering out events that come from the <code>v4l2</code> subsystem. </p>"},{"location":"Cameras/Pipelines/#camera-configuration","title":"Camera configuration","text":"<p>The configuration file is loaded from a file external to the container, so the image doesn't need to be rebuilt to update the config. </p> <p>Cameras are identified by the USB port id. It would be preferable to use camera serial ids, but unfortunately manufacturers don't bother with making them unique.</p>"},{"location":"Cameras/Pipelines/#default-config","title":"Default config","text":"<p>When there is no config for a particular port, the camera appears in the interface with its USB port id as the default name. The default config is printed to the console, so it can be easily copied into the config file and modified accordingly.</p> <p>The default config assumes the camera supports 720p video at 25fps with mjpeg compression. If this isn't true, an undefined behavior will occur.</p>"},{"location":"Cameras/Pipelines/#encoding","title":"Encoding","text":"<p>The USB bandwidth is greatly limited (see Known issues), so we should always choose the best compression option the camera offers (H264 &gt; MJPEG &gt; YUV)</p> <p>The webrtcsink module is dynamically adjusting the bitrate and encoding the stream for each user, so our pipelines have to decode the video to <code>video/x-raw</code> for the system to work.</p> <p>The webrtcsink module supposedly allows for H264 encoded input, which might be desirable with some cameras. However, I was not able to make it work, so I decode the stream before handing it off. It might be a good idea to explore this feature in the future.</p>"},{"location":"Cameras/UVC%20kernel%20patch/","title":"UVC kernel patch","text":""},{"location":"Cameras/UVC%20kernel%20patch/#nvidia-jetson-nano","title":"Nvidia Jetson Nano","text":""},{"location":"Cameras/UVC%20kernel%20patch/#step-1-download-kernel-source-for-the-current-system","title":"Step 1: Download kernel source for the current system","text":"<p>The current newest official release for Jetson Nano is R32.7.4. The downloads page for this version can be found here. The sources can be downloaded using the Driver Package (BSP) Sources link.</p> <pre><code>wget https://developer.nvidia.com/downloads/embedded/l4t/r32_release_v7.4/sources/t210/public_sources.tbz2\n</code></pre>"},{"location":"Cameras/UVC%20kernel%20patch/#step-2-extract-sources","title":"Step 2: Extract sources","text":"<p>Inside of the downloaded file, you will find a file called <code>Linux_for_Tegra/source/public/kernel_src.tbz2</code>. Extract it into a new folder</p>"},{"location":"Cameras/UVC%20kernel%20patch/#step-3-apply-patches","title":"Step 3: Apply patches","text":"<p>You can find the original patches for this trick here.</p> <p>The files you have to modify will be in the folder <code>kernel/kernel-4.9/drivers/media/usb/uvc</code>.</p> <p>Don't include lines related to <code>uvc_trace</code>, it doesn't work anymore.</p>"},{"location":"Cameras/UVC%20kernel%20patch/#step-4-build-install","title":"Step 4: Build &amp; install","text":"<p>Inside of the <code>uvc</code> folder, in which you have modified the source files, run:</p> <pre><code>make -C /lib/modules/$(uname -r)/build M=$(pwd) modules\nsudo make -C /lib/modules/$(uname -r)/build M=$(pwd) modules_install\n</code></pre>"},{"location":"Cameras/UVC%20kernel%20patch/#step-5-load-patched-module","title":"Step 5: Load patched module","text":"<p>In order to reload the uvc module without restarting the system, run</p> <pre><code>sudo depmod\nsudo modprobe -r uvcvideo\n</code></pre>"},{"location":"Cameras/UVC%20kernel%20patch/#step-6-verify","title":"Step 6: Verify","text":"<p>To check if everything had gone correctly, run</p> <pre><code>sudo modprobe -v uvcvideo\n</code></pre> <p>You should see</p> <pre><code>insmod /lib/modules/4.9.337-tegra/extra/uvcvideo.ko\n</code></pre> <p>And if you run</p> <pre><code>cat /sys/module/uvcvideo/parameters/bandwidth_cap\n</code></pre> <p>You should get</p> <pre><code>0\n</code></pre>"},{"location":"Cameras/UVC%20kernel%20patch/#step-7-configuring","title":"Step 7: Configuring","text":"<p>Unfortunately, the bandwidth limit is not described in a unit that can easily be measured and the author of the patch recommends using the highest limit that doesn't throw errors in your application. </p> <p>I've found that <code>2000</code> works quite well for 5 MJPEG FullHD streams.</p> <p>In order to set a new bandwidth cap, run</p> <pre><code>echo 2000 | sudo tee /sys/module/uvcvideo/parameters/bandwidth_cap\n</code></pre> <p>This value is value does not seem to be preserved and will need to be reset at each system boot.</p>"},{"location":"Cameras/UVC%20kernel%20patch/#step-8-automatically-setting-the-cap","title":"Step 8: Automatically setting the cap","text":"<p>TBD</p>"},{"location":"Cameras/Usage/","title":"Usage","text":""},{"location":"Cameras/Usage/#building-running","title":"Building &amp; running","text":"<p>In order to build the Docker container containing the video server run:</p> <pre><code>docker compose build\n</code></pre> <p>And to run it use:</p> <pre><code>docker compose run\n</code></pre> <p>In case you see any weird behavior, be sure to add it to the Known issues page.</p>"},{"location":"electronics/","title":"Electronics Overview","text":"<p>Expand</p> <p>This section needs additional information</p>"},{"location":"electronics/connectors/","title":"Connectors","text":"<p>Outdated</p> <p>This section need update</p> <p>This page aims to provide a comprehensive description of the cable connectors used in the rover and instructions on how to use (and assemble) them correctly. Connectors that are not explicitly listed in this article should be avoided in the rover wiring.</p>"},{"location":"electronics/connectors/#overview","title":"Overview","text":""},{"location":"electronics/connectors/#contact-gender","title":"Contact Gender","text":"<p>Data and power cables use different connectors to prevent short circuits and assembly mistakes. The scheme follows a general rule that all sources of voltage have female connectors, whether they are on board or a wire. This setup minimizes the risk of a short circuit caused by loose metal objects dropped inside connectors. The idea is shown in the picture below. </p>"},{"location":"electronics/connectors/#male-and-female-connectors","title":"Male and Female Connectors","text":"<p>Please note that a male connector has a metal pin that goes inside the metal shield of a female connector. Non-conductive parts of connectors do not matter. In case of any doubt, refer to the connector tables below.</p>"},{"location":"electronics/connectors/#used-connectors","title":"Used Connectors","text":""},{"location":"electronics/connectors/#phoenix-main-power","title":"Phoenix \u2013 Main Power","text":"<p>We use Phoenix terminal blocks to distribute the main power to every component of the rover. It provides battery voltage directly.  </p> Warning <p>Do not connect those connectors to any other voltage source, as it may easily lead to mistakes that will damage the rover. If battery voltage is unsuitable for your design, consider using 5V distributed alongside the CAN bus or integrating a voltage converter directly into your module.</p>"},{"location":"electronics/connectors/#polarization","title":"Polarization","text":"Male (reciver) Female (source) Wire IC 2,5/ 2-ST-5,08 MSTB 2,5/ 2-ST-5,08 Board MSTBVA 2,5/ 2-G-5,08 ICV 2,5/ 2-G-5,08"},{"location":"electronics/connectors/#assembly","title":"Assembly","text":"<p>All stranded (multiple thin wires inside one coating) wires cooperating with Phoenix connectors should end with end sleeves. This prevents wires from falling off the connectors and making short circuits on circuit boards. It also boosts the durability of the wire. When applying new end sleeves, pay attention not to bend or twist wires, as they would not fit correctly. </p> <p>The metal part of the sleeve should not be longer than the wires inside. See the pictures below for visual reference.</p> <p> </p> <p>It is also a good idea to check after assembly if wires stay firmly deep inside connectors. Connectors should not hold only the very end of wires. </p>"},{"location":"electronics/connectors/#micro-match-and-idc-can-bus-and-5v-power","title":"Micro-MaTch and IDC \u2013 CAN bus and 5V power","text":"<p>These connectors are used to create a CAN bus on the rover and, at the same time, power low-current devices with 5V. </p> Warning <p>If you require more than 2W, use another power source.</p>"},{"location":"electronics/connectors/#polarization_1","title":"Polarization","text":"Male (receiver) Female (source) Wire Micro-MaTch IDC Board IDC Micro-MaTch"},{"location":"electronics/connectors/#pinout","title":"Pinout","text":"Pin index Purpose 1 GND 2 DATA- 3 DATA+ 4 VCC <p>When making data cable, please ensure that you are using a ribbon cable with the first wire (corresponding to the first pin in each connector) marked, as shown in the pictures above. It is the ground wire. The specific colour does not matter. It just has to be different from the rest of the wires.</p>"},{"location":"electronics/connectors/#splitters-and-extenders","title":"Splitters and extenders","text":"<p>In general, there is rarely a need to add splitters. You can clamp an additional female IDC connector anywhere on an already-used ribbon. However, if you require a splitter or extender, you need to use a PCB, as there are no female Micro-MaTch connectors for wires. A PCB extender or splitter would have one IDC male connector and one or more female Micro-MaTch connectors.</p>"},{"location":"electronics/connectors/#usb-data-and-5v-power","title":"USB \u2013 data and 5V power","text":"<p>Currently, USB is used to power and communicate with some devices on the rover, such as:</p> <ul> <li>Cameras</li> <li>Older modules that will be replaced in the future to add CAN bus support</li> <li>COTS devices that do not support CAN bus</li> </ul> <p>New devices and modules, should use USB C (preferably) or USB A (less preferably). Unfortunately, some COTS devices may only be available with other types of USB connectors (e.g., micro USB). Try to avoid them when possible.</p> Warning <p>Do not attempt to power modules with high power requirements using USB. Assume that:</p> <ul> <li>USB 2 can deliver 2.5W</li> <li>USB 3 can deliver 7.5W</li> </ul> <p>Many other standards (Quick Charge or Power Delivery) make it possible to draw higher power, but they require a power supply that supports these standards. Such sources are not available on the rover. If you need more power, use the battery voltage directly (see battery voltage).</p>"},{"location":"electronics/connectors/#8p8c-often-called-rj45-ethernet","title":"8P8C (often called RJ45) \u2013 Ethernet","text":"<p>Ethernet cables are currently used only to connect antennas to the onboard computer. However, other devices can be connected if they require network connectivity. Possibly in the future, cameras will use high-speed Ethernet to overcome the bandwidth limit of USB 2 and perhaps offload the onboard computer.</p>"},{"location":"electronics/radiation-protection/","title":"Radiation Protection","text":"<p>Outdated</p> <p>This section need update</p>"},{"location":"electronics/radiation-protection/#radiation-effects-on-electronics","title":"Radiation effects on electronics","text":"<p>Apparently radiation is able to generate charges inside semiconductors and destroy thin insulators like silicon oxide commonly used in semiconductor components. This sort of behavior can lead to memory corruption which can interrupt any sequential electronic device. The damage can be temporary if only one or few bits get changed. Also there is a risk of latch-up in logic circuitry. Damage can also be permanent.</p> <p>Outdated</p> <p>This section needs to be refined. Include:</p> <ul> <li>what components are fragile to radiation</li> <li>at what levels they are fragile</li> <li>what is effect of the radiation on this component</li> </ul>"},{"location":"electronics/radiation-protection/#possible-solutions","title":"Possible solutions","text":"<p>Luckily there are ways to manufacture more radiation resistant devices. Most of them require use of different semiconductor technology:</p> <ul> <li>Gallium arsenide instead of silicon,</li> <li>SOI instead bulk technology (unlikely to latch because of better insulation of every transistor),</li> <li>BJT instead of FET (does not have thin insulators at all),</li> <li>SRAM instead of DRAM (DRAM is based on charge storing). Making bigger transistors with thicker gate insulators also helps. There are radiation hardened integrated circuits on the market. There is also to mount protective shields outside circuit boards.</li> </ul> <p>Outdated</p> <p>This section needs to be refined</p> <ul> <li>include new and fixed possible solution</li> <li>describe at what radiation levels the solution seems feasible</li> </ul>"},{"location":"electronics/radiation-protection/#our-preffered-solution","title":"Our preffered solution","text":"<p>Unfortunately radiation hardened integrated circuits and even discreet components are both hard to access and very expensive (more than 50\u20ac for quadruple logic gate). On this field we can only choose components based on technology there were manufactured and assume which one will be more durable.</p> <p>There is possible to use shields which can stop part of the radiation. The most cost-efficient idea is to implement software solution. Rover would operate more reliably if it could detect errors in its memory and correct them using correction algorithm or downloading data from external, more distant from source of radiation, drive. This memory does not have to be very distant. It is possible to use different kind of affordable storage like magnetic hard disc drive or optical compact disc.</p> <p>Outdated</p> <p>This section needs to be refined</p> <ul> <li>shielding works best for alpha and beta radiation - for gamma radiation shielding is not enough (eg. requires 2.8cm of lead to reduce radiation by ~x100)</li> <li>describe more error detection and correction - describe ECC memory (only hardware solutions are fast enough for RAM memory), describe better filesystems (they can correct corrupted blocks)</li> <li>add reasons why optical compact discs and hard disc drives are better than solid-state drives </li> </ul> <p>Outdated</p> <p>New section required</p> <p>Cover all issues that can affect rover</p> <ul> <li>describe the cause (eg. gamma radiation)</li> <li>describe the component (eg. BIOS)</li> <li>describe issue (eg. bit flip in boot code)</li> <li>estimate severity of issue (eg. critical)</li> <li>describe countermeasures</li> </ul>"},{"location":"electronics/rover-wiring/","title":"Rover wiring","text":"<p>Outdated</p> <p>This section need update</p> <p>Rover wiring is shown below on two separate schematics. Lines and pads (pins) that are not explicitly listed use standard connectors with standard pinout. Please, also read connectors for details about connectors used in the rover and instructions on using them correctly.</p>"},{"location":"electronics/rover-wiring/#power-management","title":"Power management","text":""},{"location":"electronics/rover-wiring/#data-management","title":"Data management","text":""},{"location":"electronics/pcb/","title":"Index","text":"<p>Expand</p> <p>This section needs additional information</p>"},{"location":"mechanics/","title":"Mechanics Overview","text":"<p>Outdated</p> <p>This section should be expanded</p>"},{"location":"mechanics/modules/","title":"Index","text":"<p>Expand</p> <p>This section needs additional information</p>"},{"location":"resources/contribution/writing-documentation/","title":"Writing Documentation","text":"<p>Documentation is vital for any project as it enhances communication and ensures that information is clearly conveyed. Well-crafted documentation should be accessible, readable, and understandable to its intended audience. It helps consolidate the solutions developed and facilitates onboarding new team members. This guideline aims to outline key principles for writing effective documentation and provide an overview of Markdown components for structuring content.</p>"},{"location":"resources/contribution/writing-documentation/#general-rules","title":"General Rules","text":"<ol> <li>Be Clear and Concise: Use simple language, avoid jargon, and present information in a direct and succinct manner.</li> <li>Organize Information Logically: Use headings, subheadings, and bullet points for clear structure.</li> <li>Provide Context: Offer necessary background information and clearly state the purpose of each section.</li> <li>Use Visual Aids: Include diagrams, screenshots, and other visuals to enhance understanding.</li> <li>Justify Design Decisions: Explain the reasons behind design choices, including benefits and alternatives.</li> <li>Update Regularly: Review and revise the documentation periodically to ensure it remains accurate and reflects any changes in the project.</li> </ol>"},{"location":"resources/contribution/writing-documentation/#creating-new-page","title":"Creating New Page","text":"<p>To create a new documentation page:</p> <ul> <li>create a new file in the folder that best fits the topic you're working on.</li> <li>ensure that you adhere to the hierarchical folder structure.</li> <li>use the appropriate file naming convention.</li> <li>add the page to the navigation.</li> <li>provide the correct metadata description.</li> <li>use rich Markdown components.</li> </ul>"},{"location":"resources/contribution/writing-documentation/#file-naming","title":"File Naming","text":"<ul> <li>files should be in lowercase, using <code>-</code> instead of spaces.</li> <li>folders should be in lowercase and organized hierarchically.</li> </ul> <p>Example</p> <pre><code>    docs\n    \u251c\u2500\u2500 assets\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 favicon.ico\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 javascripts\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 mathjax.js\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 logo.png\n    \u251c\u2500\u2500 index.md\n    \u2514\u2500\u2500 resources\n        \u251c\u2500\u2500 guidelines\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 mechanical-file-naming-and-structure.md\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 writing-documentation.md\n        \u2514\u2500\u2500 template\n            \u251c\u2500\u2500 pcb-documentation-template.md\n            \u2514\u2500\u2500 pcb-repository-template.md\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#navigation","title":"Navigation","text":"<p>To add a page to the navigation:</p> <ul> <li>edit the <code>nav</code> section in the <code>mkdocs.yml</code> file.</li> <li>add a new entry under the appropriate category that corresponds to your page.</li> </ul> <pre><code>nav:\n\n  - Other Category:\n      - other-category/other-file.md\n  - Your Section Name:\n      - your-section-name/other-file.md\n      - Your Subsection Name:\n          - your-section-name/your-subsection-name/your-file.md # &lt;-- YOUR ENTRY\n</code></pre> <p>Note</p> <p>Order of entries in the file reflects the order in the documentation.</p>"},{"location":"resources/contribution/writing-documentation/#metadata","title":"Metadata","text":"<p>Metadata allows you to edit various aspects of a documentation page. Currently, the documentation supports the following fields:</p> <ul> <li>Title</li> <li>Authors</li> <li>Date</li> <li>Version</li> </ul> <p>Note</p> <p>The title and authors are mandatory fields that must be included in the page metadata. Author's email address should be put after <code>,</code>.</p> <p>Example</p> <pre><code>---\ntitle: Your Title\nauthors:\n\n  - John Smith, smith@example.com\n  - Jan Kowalski, jan-kowalski@example.com\nversion: 1.0\ndate: 14.08.2024\n---\n\nContent\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#markdown","title":"Markdown","text":"<p>Documentation should be written in Markdown. By using various Markdown components, you can create engaging and accessible documentation.</p>"},{"location":"resources/contribution/writing-documentation/#text-formatting","title":"Text Formatting","text":"<p>Basic formatting allows you to enhance text by applying styles such as bold, italic, and underline. It helps emphasize important information, improve readability, and structure content effectively.</p> Example ContentMarkdown <p>FIRO (FLASH Inspection Rover, also known as Facility Inspection Rover) is a mobile robot designed to operate in environments where human presence is restricted due to hazardous radiation levels. It is a student project developed mostly during Erasmus internships at the FLASH particle accelerator at DESY</p> <ul> <li>bold</li> <li>italic</li> <li>underline</li> <li>highlight</li> <li>strike</li> </ul> <pre><code>**FIRO** (*FLASH Inspection Rover*, also known as *Facility Inspection Rover*) is a mobile robot designed to operate in environments where human presence is ==restricted due to hazardous radiation levels.== It is a ^^student project^^ developed mostly during Erasmus internships at the FLASH particle accelerator at DESY\n\n\n- **bold**\n- *italic*\n- ^^underline^^\n- ==highlight==\n- ~~strike~~\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#headers","title":"Headers","text":"<p>Headers organize content into sections, making it easier to navigate and understand the structure of your documentation. They are useful for highlighting key topics, creating.</p> Example <pre><code># System A\n## Subsystem B\n### Module C\n#### Component D\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#lists","title":"Lists","text":"<p>Lists organize information into clear, manageable points, making content easier to read and understand. They are useful for outlining steps, summarizing key points, or grouping related items.</p> Example: Basic list ContentMarkdown <ol> <li>Software<ul> <li>Interface</li> <li>Cameras</li> </ul> </li> <li>Electronics</li> <li>Mechanics</li> </ol> <pre><code>4. Software\n  - Interface\n  - Cameras\n5. Electronics\n6. Mechanics\n</code></pre> Example: List with checks ContentMarkdown <p>Interface</p> <ul> <li> Camera streams<ul> <li> Basic streams</li> <li> Bridge to ROS2</li> </ul> </li> <li> Charts</li> <li> Controller support</li> </ul> <pre><code>Interface\n\n- [ ] Camera streams\n    * [x] Basic streams\n    * [ ] Bridge to ROS2\n- [ ] Charts\n- [x] Controller support\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#tables","title":"Tables","text":"<p>Tables present data in a structured, grid format, making it easy to compare and analyze information. They are useful for displaying statistics, comparing features, or organizing detailed information systematically.</p> Example ContentMarkdown Name Description FIRO Mobile robot RadCon Real-time Gamma Dosimeter FLASH Linear accelerator at DESY <pre><code>| Name   | Description                |\n| :----- | :------------------------- |\n| FIRO   | Mobile robot               |\n| RadCon | Real-time Gamma Dosimeter  |\n| FLASH  | Linear accelerator at DESY |\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#grids","title":"Grids","text":"<p>Grids arrange content in a structured, multi-column layout, providing a visually appealing way to display related information. They are useful for organizing complex data, showcasing comparisons, or creating responsive designs in documentation.</p> Example ContentMarkdown <ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <pre><code>&lt;div class=\"grid cards\" markdown&gt;\n\n\n- :fontawesome-brands-html5: __HTML__ for content and structure\n- :fontawesome-brands-js: __JavaScript__ for interactivity\n- :fontawesome-brands-css3: __CSS__ for text running out of boxes\n- :fontawesome-brands-internet-explorer: __Internet Explorer__ ... huh?\n\n&lt;/div&gt;\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#code-blocks","title":"Code Blocks","text":"<p>Code blocks allow you to display formatted code snippets within your documentation, making it easier for readers to understand and replicate coding examples. They are essential for illustrating programming concepts, providing step-by-step instructions, and sharing command-line operations or configuration files in a clear and readable manner.</p> Example ContentMarkdown <pre><code>def main():\n    ...\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>```py\ndef main():\n    ...\n\nif __name__ == \"__main__\":\n    main()\n```\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#admonitions","title":"Admonitions","text":"<p>Admonitions in documentation allow you to draw the user's attention to important issues. Using the appropriate type, such as notes, warnings, or tips, is key for effective communication.</p> Example ContentMarkdown <p>Note</p> <p>This is note admonition</p> Warning <p>This is warning admonition. It is auto expanded</p> Danger <p>This is danger admonition. You can expand this admonition</p> <pre><code>!!! note\n    This is note admonition\n\n???+ warning\n    This is warning admonition. It is auto expanded\n\n??? danger\n    This is danger admonition. You can expand this admonition\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#available-types","title":"Available Types","text":"Note <p>Use for general important information or reminders.</p> Abstract <p>Summarize key points or concepts succinctly.</p> Info <p>Provide additional context or background information.</p> Tip <p>Share helpful advice or best practices.</p> Success <p>Indicate successful outcomes or positive results.</p> Question <p>Pose questions to engage readers or prompt thinking.</p> Warning <p>Highlight potential issues or cautionary advice.</p> Failure <p>Discuss failures or mistakes to avoid.</p> Danger <p>Alert users to critical issues or severe risks.</p> Bug <p>Document known bugs or issues in the system.</p> Example <p>Illustrate concepts with practical examples.</p> Quote <p>Highlight significant quotes or key statements.</p> Outdated <p>Marks outdated section of the documentation</p> Expand <p>As placeholder for planning structure of page</p>"},{"location":"resources/contribution/writing-documentation/#annotations","title":"Annotations","text":"<p>Annotations are little markers that can be added almost anywhere in document. When users click on or focus these markers, a tooltip appears with expandable content. You can use them to add additional content for some topics.</p> Example ContentMarkdown <p>The rover has builtin watchdog (1)</p> <ol> <li>A watchdog is a monitoring system or process designed to ensure that a computer system or application is functioning correctly and to detect and respond to failures or issues.</li> </ol> <pre><code>The rover has builtin watchdog (1)\n{ .annotate }\n\n\n1. A watchdog is a monitoring system or process designed to ensure that a computer system or application is functioning correctly and to detect and respond to failures or issues.\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#pins","title":"Pins","text":"<p>Pins allow for placing annotations on images, which can be useful for highlighting specific areas</p> <ul> <li><code>pin-big</code>: Enlarges the pin.</li> <li><code>pin-contrast</code>: Creates a high-contrast pin.</li> <li><code>data-x</code> and <code>data-y</code>: Set the pin's position as a percentage on the image.</li> <li><code>data-id</code>: Sets the index of the image to which the pin belongs. Indexing starts from <code>0</code></li> </ul> Example ContentMarkdown <p></p> <p>(1) </p> <ol> <li>This is center of image</li> </ol> <pre><code>&lt;div class=\"image-box pins annotate\" markdown&gt;\n![Image title](https://dummyimage.com/600x200/eee/aaa){ align=center }\n\n&lt;span class=\"pin pin-big pin-contrast\" data-x=\"0.5\" data-y=\"0.5\" data-id=\"0\"&gt;(1)&lt;/span&gt;\n&lt;/div&gt;\n\n\n1. This is center of image\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#carousel","title":"Carousel","text":"<p>The carousel feature allows for displaying multiple images in a slideshow format. Users can navigate through the images to get a comprehensive view.</p> Example ContentMarkdown <p></p> <pre><code>&lt;div class=\"image-box carousel center\" markdown&gt;\n![Image title](https://dummyimage.com/300x200/eee/aaa){ align=center }\n![Image title](https://dummyimage.com/600x200/000/fff){ align=center }\n&lt;/div&gt;\n</code></pre> Example: Mixing with pins ContentMarkdown <p></p> <p>(1) (2) </p> <ol> <li>This is center of second image</li> <li>Left side of first image</li> </ol> <pre><code>&lt;div class=\"image-box carousel center\" markdown&gt;\n![Image title](https://dummyimage.com/600x200/eee/aaa){ align=center }\n\n![Image title](https://dummyimage.com/600x200/000/fff){ align=center }\n\n&lt;/div&gt;\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#footnotes","title":"Footnotes","text":"<p>Footnotes provide additional information or references without interrupting the flow of the main text. They are useful for citing sources, adding clarifications, or offering supplementary details.</p> Example ContentMarkdown <p>We use RadCon<sup>1</sup> dosimeter as main component for radiation data collection submodule</p> <pre><code>We use RadCon[^1] dosimeter as main component for radiation data collection submodule\n\n[^1]: Markus Hoffmann, MichaelFenner, Stanislav Chystiakov, Julien Branlard, Holger Schlarb, Bhaskar Mukherjee, *RadCon a real-time Gamma Dosimeter for XFEL using PIN-Diode-Sensors*, 2019\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#formulas","title":"Formulas","text":"<p>Formulas allow you to present mathematical equations and expressions clearly within your documentation. They are essential for explaining calculations, scientific concepts, and technical details accurately and concisely. Using LaTeX make formulas easy to read and use.</p> Example ContentMarkdown \\[ R = \\frac{U}{I} \\] <pre><code>$$\nR = \\frac{U}{I}\n$$\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#diagrams","title":"Diagrams","text":"<p>Diagrams visually represent complex concepts, processes, or relationships, making them easier to understand. They enhance documentation by providing clear, illustrative explanations that complement textual descriptions.</p> Example: Basic graph ContentMarkdown <pre><code>%%{init: {'theme': 'dark'}}%%\ngraph LR\n\nA(Start) --&gt; B{Error?};\nB -- Yes --&gt; C[Debug];\nB -- No --&gt; H(stop);\nC --&gt; D[Test];\nD --&gt; E{Passes tests?};\nE -- Yes --&gt; G[Deploy];\nE -- No --&gt; C;\nG --&gt; H;</code></pre> <pre><code>``` mermaid\n%%{init: {'theme': 'dark'}}%%\ngraph LR\n\nA(Start) --&gt; B{Error?};\nB -- Yes --&gt; C[Debug];\nB -- No --&gt; H(stop);\nC --&gt; D[Test];\nD --&gt; E{Passes tests?};\nE -- Yes --&gt; G[Deploy];\nE -- No --&gt; C;\nG --&gt; H;\n```\n</code></pre> Example: Quadrant chart ContentMarkdown <pre><code>%%{init: {'theme': 'dark'}}%%\n\nquadrantChart\n    title Rover components\n\n    x-axis Low complexity --&gt; High complexity\n    y-axis Low priority --&gt; High priority\n\n    quadrant-1 Critical\n    quadrant-2 To implement\n    quadrant-3 Nice to have\n    quadrant-4 To re-evaluate\n\n    Component A: [0.7, 0.9]\n    System B: [0.6, 0.3]\n    Procedure X: [0.4, 0.6]</code></pre> <pre><code>``` mermaid\n%%{init: {'theme': 'dark'}}%%\n\nquadrantChart\n    title Rover components\n\n    x-axis Low complexity --&gt; High complexity\n    y-axis Low priority --&gt; High priority\n\n    quadrant-1 Critical\n    quadrant-2 To implement\n    quadrant-3 Nice to have\n    quadrant-4 To re-evaluate\n\n    Component A: [0.7, 0.9]\n    System B: [0.6, 0.3]\n    Procedure X: [0.4, 0.6]\n```\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#file-button","title":"File Button","text":"<p>The File Button creates a link to a downloadable file. This allows you to highlight documents available for download. By default, the file will be opened by the browser (if the browser supports this feature). If you want to force the file to be downloaded rather than opened, add the download attribute to the link.</p> Example ContentMarkdown <p>The component datasheet is available here: IDC_F_datasheet.pdf or here (force download) IDC_F_datasheet.pdf</p> <pre><code>The component datasheet is available here: [IDC_F_datasheet.pdf](&lt;../../electronics/datasheets/IDC_F_datasheet.pdf&gt;){ file } or here (force download) [IDC_F_datasheet.pdf](&lt;../../electronics/datasheets/IDC_F_datasheet.pdf&gt;){ file download }\n</code></pre>"},{"location":"resources/contribution/writing-documentation/#video","title":"Video","text":"<p>Video allows you to embed a video directly into your web page.</p> Example ContentMarkdown <p></p> <pre><code>![type:video](https://www.youtube.com/embed/oy2zDJPIgwc)\n</code></pre> <ol> <li> <p>Markus Hoffmann, MichaelFenner, Stanislav Chystiakov, Julien Branlard, Holger Schlarb, Bhaskar Mukherjee, RadCon a real-time Gamma Dosimeter for XFEL using PIN-Diode-Sensors, 2019\u00a0\u21a9</p> </li> </ol>"},{"location":"resources/electronics/pcb-documentation-template/","title":"PCB Documentation Template","text":"ExampleMarkdown <pre><code># &lt;Project title&gt;\n\n## Overview\n**Repository:** &lt;Link to repository&gt;\n&lt;Brief description&gt;&gt;\n\n## Usage\n&lt;Provide instructions for user how to use or interact with the PCB&gt;\n\n### Pinout\n&lt;Include a pinout schematic. This can help users understand how to interface with the PCB.&gt;\n\n### Troubleshooting\n&lt;Describe common issues that may arise during the PCB usage. Include guidance on identifying and resolving these issues.&gt;\n\n## Design\n### Requirements\n&lt;Describe the purpose of the project and all requirements it has to fulfill&gt;\n\n### Components\n&lt;This section should highlight the most important components and their functions.&gt; \n\n### Schematic\n&lt;Include an exported image of the PCB schematic.&gt;  \n&lt;Optionally describe any relevant details about the schematic design&gt;\n\n### Layout\n&lt;Include exported images of the PCB layouts&gt;\n&lt;- Combined layout with dimensions. Include all important dimensions: PCB width and height, mounting holes size and position, etc.  &gt;\n&lt;- Combined layout without dimensions&gt;  \n&lt;- Separate layouts for each layer&gt;  \n&lt;Optionally describe any relevant details about the layout&gt;\n\n### Reference Documentation\n&lt;Include links to relevant reference documents such as datasheets for the components. When possible, host the documents in the project repository. It will guarantee they are easily accessible in the future, even If the original links would be no longer valid.&gt;\n\n## Firmware\n### Overview\n&lt;Briefly describe function of the firmware. You may also describe firmware architecture, key components and dependencies.&gt;\n\n### Usage\n&lt;Describe how to use the firmware. Include information about:&gt;\n\n&lt;- user interfaces or commands available &gt; \n&lt;- settings, or parameters that can be customized&gt;\n\n### Development  \n&lt;- Installing dependencies required for the development&gt;  \n&lt;- Setting up development environment&gt;  \n&lt;- Uploading firmware to the target device&gt;\n\n## Manufacturing\n### Manufacturing Considerations\n&lt;Include any manufacturing considerations for the PCB design, such as panelization, solder mask requirements, or impedance control.&gt;\n\n### Assembly Instructions\n&lt;Include any specific guidelines or precautions that need to be followed during the assembly process.&gt;\n\n### Testing\n&lt;Describe the testing procedures and methodologies used to verify the functionality of the PCB.&gt; \n\n## Conclusions\n&lt;Summarize the key findings of the PCB project. Provide recommendations for future improvements.&gt;\n</code></pre>"},{"location":"resources/electronics/pcb-documentation-template/#overview","title":"Overview","text":"<p>Repository: Provide link to project repository https://example.com Provide a brief description of the project. </p>"},{"location":"resources/electronics/pcb-documentation-template/#usage","title":"Usage","text":"<p>Provide instructions for user how to use or interact with the PCB </p>"},{"location":"resources/electronics/pcb-documentation-template/#pinout","title":"Pinout","text":"<p>Include a pinout schematic. This can help users understand how to interface with the PCB.</p> <p></p>"},{"location":"resources/electronics/pcb-documentation-template/#troubleshooting","title":"Troubleshooting","text":"<p>Describe common issues that may arise during the PCB usage. Include guidance on identifying and resolving these issues.</p> <p>Note</p> <p>Use admonitions for important information</p> <p>Bug</p> <p>Use <code>bug</code> admonition to document known bugs or issues in the system.</p>"},{"location":"resources/electronics/pcb-documentation-template/#design","title":"Design","text":""},{"location":"resources/electronics/pcb-documentation-template/#requirements","title":"Requirements","text":"<p>Describe the purpose of the project and all requirements it has to fulfill</p> <p>Abstract</p> <p>Use <code>abstract</code> admonition to summarize key points or concepts succinctly.</p>"},{"location":"resources/electronics/pcb-documentation-template/#components","title":"Components","text":"<p>This section should highlight the most important components and their functions. </p>"},{"location":"resources/electronics/pcb-documentation-template/#schematic","title":"Schematic","text":"<p>Include an exported image of the PCB schematic. Optionally describe any relevant details about the schematic design</p> <p></p>"},{"location":"resources/electronics/pcb-documentation-template/#layout","title":"Layout","text":"<p>Include exported images of the PCB layouts  </p> <ul> <li>Combined layout with dimensions. Include all important dimensions: PCB width and height, mounting holes size and position, etc.  </li> <li>Combined layout without dimensions  </li> <li>Separate layouts for each layer Optionally describe any relevant details about the layout</li> </ul> <p> </p>"},{"location":"resources/electronics/pcb-documentation-template/#reference-documentation","title":"Reference Documentation","text":"<p>Include links to relevant reference documents such as datasheets for the components. When possible, host the documents in the project repository. It will guarantee they are easily accessible in the future, even If the original links would be no longer valid.</p>"},{"location":"resources/electronics/pcb-documentation-template/#firmware","title":"Firmware","text":""},{"location":"resources/electronics/pcb-documentation-template/#overview_1","title":"Overview","text":"<p>Briefly describe function of the firmware. You may also describe firmware architecture, key components and dependencies.</p>"},{"location":"resources/electronics/pcb-documentation-template/#usage_1","title":"Usage","text":"<p>Describe how to use the firmware. Include information about:</p> <ul> <li>user interfaces or commands available  </li> <li>settings, or parameters that can be customized</li> </ul>"},{"location":"resources/electronics/pcb-documentation-template/#development","title":"Development","text":"<ul> <li>Installing dependencies required for the development  </li> <li>Setting up development environment  </li> <li>Uploading firmware to the target device</li> </ul>"},{"location":"resources/electronics/pcb-documentation-template/#manufacturing","title":"Manufacturing","text":""},{"location":"resources/electronics/pcb-documentation-template/#manufacturing-considerations","title":"Manufacturing Considerations","text":"<p>Include any manufacturing considerations for the PCB design, such as panelization, solder mask requirements, or impedance control.</p> <p>Warning</p> <p>Use <code>warning</code> admonition to highlight potential issues or cautionary advice.</p>"},{"location":"resources/electronics/pcb-documentation-template/#assembly-instructions","title":"Assembly Instructions","text":"<p>Include any specific guidelines or precautions that need to be followed during the assembly process.</p> <p>Tip</p> <p>Use <code>tip</code> admonition to share helpful advice or best practices.</p> <p>Danger</p> <p>Use <code>danger</code> admonition to alert users to critical issues or severe risks.</p>"},{"location":"resources/electronics/pcb-documentation-template/#testing","title":"Testing","text":"<p>Describe the testing procedures and methodologies used to verify the functionality of the PCB. </p> <p>Info</p> <p>Use <code>info</code> admonition to provide additional context or background information.</p>"},{"location":"resources/electronics/pcb-documentation-template/#conclusions","title":"Conclusions","text":"<p>Summarize the key findings of the PCB project. Provide recommendations for future improvements.</p> <p>Failure</p> <p>Use <code>failure</code> admonition to discuss failures or mistakes to avoid.</p>"},{"location":"resources/electronics/pcb-repository-template/","title":"PCB Repository Tempalte","text":""},{"location":"resources/electronics/pcb-repository-template/#repository-description","title":"Repository Description","text":"<p>In <code>README.md</code>, give a short summary of the project and guide users to the full documentation at https://rxsio.github.io/firo-docs/ for details. </p>"},{"location":"resources/electronics/pcb-repository-template/#repository-structure","title":"Repository Structure","text":"<pre><code>- Project Name:\n    - Gerber:\n        - Gerber.gbr\n    - Layout:\n        - layout.pdf\n        - layout.pcb\n    - Reference Documentation:\n        - Datasheet1.pdf\n        - Datasheet2.pdf\n        - ApplicationNote.pdf\n    - Schematic:\n        - schematic.pdf\n        - schematic.sch\n    - BOM:\n        - bom.csv\n    - Firmware:\n        - apps:\n            - main.c\n        - include:\n            - module1.h\n            - module2.h\n        - src:\n            - module1.c\n            - module2.c\n        - extern:\n            - library1\n    - Project:\n        - project.pro\n    - README.md\n</code></pre>"},{"location":"resources/mechanics/mechanical-file-naming-and-structure/","title":"Mechanical File Naming and Structure","text":"<p>Note</p> <p>Write names in lowercase only. Use <code>_</code> instead of space</p>"},{"location":"resources/mechanics/mechanical-file-naming-and-structure/#main-assembly","title":"Main Assembly","text":"<p><code>00-name</code></p> <p>Where:</p> <ul> <li><code>name</code> is the name of the project. Write in lowercase only. Use <code>_</code> instead of space  </li> </ul> <p>Example</p> <pre><code>project: # Top folder of the project\n\n    - 00-project # Main Assembly\n</code></pre>"},{"location":"resources/mechanics/mechanical-file-naming-and-structure/#subassembly","title":"Subassembly","text":"<p><code>AA_..._XX_YY_00-name</code></p> <p>Where:  </p> <ul> <li><code>AA</code>, ..., <code>XX</code> are numbers of the parent subassemblies  </li> <li><code>YY</code> is the number of the current subassembly  </li> <li><code>name</code> is a descriptive name of the subassembly. Write in lowercase only. Use <code>_</code> instead of space  </li> </ul> <p>Each subassembly is placed in its own dedicated folder.</p>"},{"location":"resources/mechanics/mechanical-file-naming-and-structure/#subassembly-folder","title":"Subassembly folder","text":"<p><code>AA_..._XX_YY-name</code></p> <p>Where:  </p> <ul> <li><code>AA</code>, ..., <code>XX</code> are numbers of the parent subassemblies  </li> <li><code>YY</code> is the number of the current subassembly  </li> <li><code>name</code> is a descriptive name of the subassembly. Write in lowercase only. Use <code>_</code> instead of space  </li> </ul> <p>Example</p> <pre><code>project: # Top folder of the project\n\n    - 00-project # Main Assembly\n    - 01-subassembly1: # Folder for subassembly\n        - 01_00-subassembly1 # Subassembly file\n        - 01_01-sub_subassembly: # Folder for subassembly in a subbassembly\n            - 01_01_00-sub_subassembly # Subassembly file\n    - 02-subassembly2: # Folder for another subassembly\n        - 02_00-subassembly2 # Subassembly file\n</code></pre>"},{"location":"resources/mechanics/mechanical-file-naming-and-structure/#part","title":"Part","text":"<p><code>AA_..._XX_YY_ZZ-name</code></p> <p>Where:</p> <ul> <li><code>AA</code>, ..., <code>XX</code> are numbers of the parent subassemblies  </li> <li><code>YY</code> is the number of the current subassembly  </li> <li><code>ZZ</code> is the number of the part  </li> <li><code>name</code> is a descriptive name of the part. Write in lowercase only. Use <code>_</code> instead of space  </li> </ul> <p>Each part is placed in its (sub)assembly folder  </p> <p>Example</p> <pre><code>project: # Top folder of the project\n\n    - 00-project # Main Assembly\n    - 01-subassembly1: # Folder for subassembly\n        - 01_00-subassembly1 # Subassembly file\n        - 01_01-sub_subassembly: # Folder for subassembly in a subbassembly\n            - 01_01_00-sub_subassembly # Subassembly file\n            - 01_01_01-part1 # Part (file) of the (sub)subassembly\n        - 01_02-part1 # Part (file) of the subassembly\n        - 01_03-part2 # Another part (file) of the subassembly\n    - 02-subassembly2: # Folder for another subassembly\n        - 02_00-subassembly1 # Subassembly file\n        - 02_01-part1 # Part (file) of the subassembly\n        - 02_02-part2 # Another part (file) of the subassembly\n</code></pre>"},{"location":"resources/mechanics/mechanical-file-naming-and-structure/#commercial-and-standardized-elements","title":"Commercial and Standardized Elements","text":"<p><code>[Standard|Manufacturer]-name</code></p> <p>Where:  </p> <ul> <li><code>[Standard|Manufacturer]</code> is the standard of a standardized part or name of the  manufacturer of the not standardized part. Write in lowercase only. Use <code>_</code> instead of space.  </li> <li><code>name</code> is a descriptive name of the part. It may but doesn't have to be name used by the manufacturer. Write in lowercase only. Use <code>_</code> instead of space.  </li> </ul> <p>Note</p> <p>All external parts such as commercial parts from manufacturers and standardized elements (e.g., fasteners) should be stored only in the  folder \"external\" which is in the top folder of the project.  </p> <p>Example</p> <pre><code>project: # Top folder of the project\n\n    - 00-project # Main Assembly\n    - 01-subassembly1: # Folder for subassembly\n        - 01_00-subassembly1 # Subassembly file\n        - 01_01-sub_subassembly: # Folder for subassembly in a subbassembly\n            - 01_01_00-sub_subassembly # Subassembly file\n            - 01_01_01-part1 # Part (file) of the (sub)subassembly\n        - 01_02-part1 # Part (file) of the subassembly\n        - 01_03-part2 # Another part (file) of the subassembly\n    - 02-subassembly2: # Folder for another subassembly\n        - 02_00-subassembly1 # Subassembly file\n        - 02_01-part1 # Part (file) of the subassembly\n        - 02_02-part2 # Another part (file) of the subassembly\n    - external:\n        - standard-standarized_part # Standarized part\n        - standard2-another_part # Another standarized part\n        - manufacturer-commercial_part # Catalog part from manufacturer\n</code></pre>"},{"location":"resources/mechanics/mechanical-file-naming-and-structure/#exported-files","title":"Exported files","text":"<ul> <li>Exported from (sub)assembly: <code>AA_..._XX_YY_00-name</code>, where <code>AA_..._XX_YY_00-name</code> is the name of the (sub)assembly  </li> <li>Exported from part: <code>AA_..._XX_YY_ZZ-name</code>, where <code>AA_..._XX_YY_ZZ-name</code> is the name of the part  </li> </ul> <p>Note</p> <p>All exported files should have their dedicated folders within each subassembly folder. The name of the folder should match the exported file extension (e.g., \"pdf\" for pdf files).  </p> <p>Example</p> <pre><code>project: # Top folder of the project\n\n    - 00-project # Main Assembly\n    - 01-subassembly1: # Folder for subassembly\n        - 01_00-subassembly1 # Subassembly file\n        - 01_01-sub_subassembly: # Folder for subassembly in a subbassembly\n            - 01_01_00-sub_subassembly # Subassembly file\n            - 01_01_01-part1 # Part (file) of the (sub)subassembly\n        - 01_02-part1 # Part (file) of the subassembly\n        - 01_03-part2 # Another part (file) of the subassembly\n        - dwg:\n            - 01_00-subassembly1.dwg\n            - 01_03-part2.dwg\n        - pdf:\n            - 01_00-subassembly1.pdf\n            - 01_03-part2.pdf\n    - 02-subassembly2: # Folder for another subassembly\n        - 02_00-subassembly1 # Subassembly file\n        - 02_01-part1 # Part (file) of the subassembly\n        - 02_02-part2 # Another part (file) of the subassembly\n        - stl:\n            - 02_01-part1.stl\n            - 02_02-part2.stl\n    - external:\n        - standard-standarized_part # Standarized part\n        - standard2-another_part # Another standarized part\n        - manufacturer-commercial_part # Catalog part from manufacturer\n        - stp:\n            - manufacturer-commercial_part.stp\n    - stp:\n        - 00-project.stp\n</code></pre>"},{"location":"resources/other/3d-printer-network-setup/","title":"3D Printer Network Setup","text":"<ol> <li> <p>Edit <code>/etc/wpa_supplicant/wpa_supplicant.conf</code> file    Replace hotspot_ssid, hotspot_password, eduroam_login and eduroam_password accordingly. Eduroam configuration may vary by university. </p><pre><code>ctrl_interface=/var/run/wpa_supplicant\nupdate_config=1\ncountry=DE\n\nnetwork={\n    ssid=\"hotspot_ssid\"\n    psk=\"hotspot_password\"\n    priority=1\n}\n\nnetwork={\n    ssid=\"eduroam\"\n    key_mgmt=WPA-EAP\n    eap=PEAP\n    identity=\"eduroam_login\"\n    password=\"eduroam_password\"\n    phase2=\"auth=MSCHAPV2\"\n    priority=2\n}          \n</code></pre> </li> <li> <p>Test your connectivity. Sometimes changing the configuration above may be sufficient. If the printer still does not connect to the hotspot or eduroam, then the following steps may help.</p> </li> <li>Remove or comment out all lines in <code>/etc/dnsmasq.conf</code></li> <li>In <code>/etc/default/hostapd</code> replace <code>DAEMON_CONF=\"/etc/hostapd/hostapd.conf\"</code> with <code>DAEMON_CONF=\"\"</code></li> <li>In <code>/etc/sysctl.conf</code> remove (or comment out) the line containing <code>net.ipv4.ip_forward=1</code></li> </ol>"},{"location":"resources/software/learning-ros/","title":"Learning ROS","text":""},{"location":"resources/software/learning-ros/#prerequisites","title":"Prerequisites","text":"<p>Before diving into ROS, it's highly recommended that you have practical experience with the following:</p> <ul> <li>Git</li> <li>Python or C++ programming</li> <li>Working with Linux, especially Ubuntu</li> </ul> <p>If you're lacking in any of these areas, consider brushing up through resources like git - the simple guide. If you're unfamiliar with more than one of these tools, it might be worth dedicating some time to thoroughly study each topic. For newcomers to programming, we suggest learning Python first\u2014it\u2019s more approachable than C++ and better suited for grasping basic programming concepts.</p> <p>We recommend using VSCode as your IDE, as it\u2019s the preferred option for working on the FIRO project.</p> <p>For Linux beginners, we suggest installing Ubuntu 22.04 natively on your system. Be cautious when setting up dual-boot with Windows to avoid wiping out your other operating system. Alternatively, if you're on Windows 11, you can use WSL (Windows Subsystem for Linux), though it might require extra troubleshooting for GUI applications like RVIZ or Gazebo. Regardless of your installation method, stick with Ubuntu 22.04, as neither older nor newer versions are compatible with ROS2 Humble, which we use for FIRO.</p>"},{"location":"resources/software/learning-ros/#installing-ros-and-setting-up-the-environment","title":"Installing ROS and Setting Up the Environment","text":"<p>While we've prepared a dedicated ROS workspace for FIRO, I recommend not using it right away. Start by following the official ROS guides and install ROS2 Humble natively. Do a full desktop installation (<code>ros-humble-desktop</code>), then move on to configuring your environment.</p>"},{"location":"resources/software/learning-ros/#beginner-tutorials","title":"Beginner Tutorials","text":"<p>The official ROS 2 tutorials are excellent for getting started. Begin with Beginner: CLI Tools, but skip the sections on Understanding Services and Understanding Actions for now, as they can be overwhelming for newcomers. You'll learn about them when they become necessary.</p> <p>Next, move on to Beginner: Client Libraries. Again, skip Writing a Simple Service and Client, Creating and Using Plugins, and only focus on the message-related parts in Creating Custom Msg and Srv Files, ignoring services.</p> <p>Finally, go to the Intermediate Tutorials and complete:</p> <ul> <li>Managing Dependencies with rosdep</li> <li>Launch Files (choose either XML or YAML syntax)</li> </ul>"},{"location":"resources/software/learning-ros/#moving-forward","title":"Moving Forward","text":"<p>Once you've completed these tutorials, you\u2019ll be ready to dive into FIRO development. For the next steps, head over to writing-ros-packages.md, where you'll learn how to set up the recommended development environment for ROS2 FIRO packages and explore our coding standards and guidelines.</p>"},{"location":"resources/software/repository-structure/","title":"Repository Structure","text":""},{"location":"resources/software/repository-structure/#naming-conventions","title":"Naming Conventions","text":"<p>Repositories should be appropriately named to reflect their purpose. For repositories containing universal projects, avoid including the project name in the repository name.</p>"},{"location":"resources/software/repository-structure/#git-branching-strategy","title":"Git Branching Strategy","text":"<p>This strategy standardizes repository work, reduces error risks and issues, and shortens deployment time for new projects.</p> <ul> <li><code>main</code> - this branch holds the latest development changes and produces <code>nigtly</code> builds</li> <li><code>release</code> - holds <code>stable</code> and versioned releases</li> <li><code>feature/&lt;feature-name&gt;</code> - used to develop new features or enhancements</li> </ul> <p>For ROS2-related repositories:</p> <ul> <li><code>&lt;ros2_version&gt;</code> - for repositories related to ROS2, branches named with a ROS2 version (e.g., humble, foxy) are treated as releases corresponding to that specific ROS2 version</li> <li><code>backport/&lt;version&gt;</code> - used to apply changes from the main branch to specific ROS2 version branches.</li> </ul> <p>Note</p> <p>For documentation repositories, the release branch is not used. Instead, the <code>main</code> branch serves as the deployable documentation.</p> <p>CI/CD Practices:</p> <ul> <li>automatic CI should be set up for stable, nightly, and tagged branches, typically producing the appropriate Docker images.</li> <li>direct work on the <code>release</code> branch should be avoided; all changes should occur through <code>main</code> or appropriate <code>feature</code> or <code>backport</code> branches.</li> </ul>"},{"location":"resources/software/repository-structure/#continuous-integration-ci","title":"Continuous Integration (CI)","text":"<ul> <li>repositories should have CI/CD configured to:<ul> <li>verify that the project builds correctly (for pull requests)</li> <li>build the project and publish results, such as Docker images</li> <li>use tagging conventions in Docker images according to the branching strategy</li> </ul> </li> </ul>"},{"location":"resources/software/writing-ros-packages/","title":"Writing ROS packages","text":""},{"location":"resources/software/writing-ros-packages/#development-environment","title":"Development Environment","text":"<p>We've prepared a VS Code workspace with a devcontainer, which includes a pre-configured ROS2 workspace and all recommended development tools (linters, formatters, etc.). You can find it here.</p>"},{"location":"resources/software/writing-ros-packages/#prerequisites","title":"Prerequisites","text":"<p>Before you start, make sure you have the following installed:</p> <ul> <li>Docker</li> <li>VS Code</li> <li>The Remote Development plugin in VS Code</li> </ul> <p>Additionally, configure Docker to run without sudo (you may need to restart your PC for these changes to take effect).</p>"},{"location":"resources/software/writing-ros-packages/#cloning-the-workspace","title":"Cloning the Workspace","text":"<p>Clone our workspace from the repository and open it in VS Code. Ensure that the Remote Development plugin is installed and enabled. When you first open the workspace, VS Code should prompt you to reopen the folder in a container (Reopen in Container). If you missed the prompt, use <code>Ctrl + Shift + P</code>, search for <code>Dev Containers: Reopen in Container</code>, and select it. Once successful, you\u2019ll see a small Dev Container label in the lower left corner of VS Code. </p> <p>If you run into issues, check the setup instructions in this repository, which is the baseline for our environment and has more comprehensive setup instructions.</p>"},{"location":"resources/software/writing-ros-packages/#workflow","title":"Workflow","text":"<p>Explore our predefined tasks in VS Code. Use <code>Ctrl + Shift + B</code> to run <code>colcon build</code> and fully build the workspace. You can also use <code>Ctrl + Shift + P</code>, search for <code>Tasks: Run Task</code>, and explore other tasks, such as building with debug or release settings, installing dependencies with rosdep, or creating new packages.</p> <p>Pay close attention to any warnings or errors during development, especially those from linters (for C++), which help enforce good coding practices. If you're new to programming, don\u2019t follow warnings blindly. Each one is an opportunity to learn. Look up any unfamiliar warnings to understand their purpose.</p>"},{"location":"resources/software/writing-ros-packages/#general-guidelines","title":"General Guidelines","text":"<ul> <li>When working on a feature, create a feature branch and open a pull request for merging into the release (humble) branch.</li> <li>Make small, atomic commits to simplify reviews.</li> <li>Use conventional git commit messages.</li> </ul>"},{"location":"resources/software/writing-ros-packages/#creating-your-own-package","title":"Creating Your Own Package","text":""},{"location":"resources/software/writing-ros-packages/#choosing-the-right-repository","title":"Choosing the Right Repository","text":"<p>Start by selecting the appropriate repository to host your package. Typically, it will be one of the following:</p> <ul> <li>firo_common for packages used on both the rover and in simulation</li> <li>firo_robot for rover-specific packages</li> <li>firo_simulator for simulation-specific packages</li> </ul> <p>If your package is more general or can be used with other robots, create a separate repository and add it as a submodule to one of the above repositories.</p>"},{"location":"resources/software/writing-ros-packages/#defining-interfaces","title":"Defining Interfaces","text":"<p>When your ROS node uses topics, services, or actions, avoid creating custom message types unless absolutely necessary, as this makes your node incompatible with already existing packages. Always check for suitable message types in ROS common_interfaces or other published ROS packages. If nothing appropriate is found, you can explore unpublished community packages (e.g., on GitHub). Only create a custom message if no suitable message exists, and always place new message definitions in a separate package.</p> <p>It's important to use message types that are semantically correct and have the appropriate units. Your usage doesn\u2019t have to strictly follow the message description, but it must align with the message\u2019s intended semantics and units to avoid confusion for other developers. If no existing message type fits your needs, it's better to create a new one than to misuse an existing message.</p> <p>Additionally, follow conventions when defining ROS parameters or choosing topic names. For example, the robot description in ROS2 is typically stored in the <code>~robot_description</code> parameter and published to the <code>/robot_description</code> topic. While many standards are documented in REPs, a lot of conventions are community-driven and learned through experience or by studying other packages.</p>"},{"location":"resources/software/writing-ros-packages/#adding-new-dependencies","title":"Adding New Dependencies","text":"<p>Whenever you introduce new dependencies to a package, make sure they can be installed via rosdep. After adding dependencies, update the <code>package.xml</code> file accordingly.</p> <p>If a library you need isn\u2019t available via rosdep and is small, consider including it in your package as a submodule. For ROS packages not available via rosdep, add them as submodules to the appropriate repository (firo_common, firo_robot, or firo_simulator).</p>"},{"location":"resources/software/writing-ros-packages/#launch-files","title":"Launch Files","text":"<p>When adding new functionality (e.g., nodes or configurations) to a package, consider updating or adding launch files. For parameter management, prefer loading parameters from YAML files rather than hardcoding them into the launch file.</p>"},{"location":"resources/software/writing-ros-packages/#license","title":"License","text":"<p>Use Apache 2.0 unless required otherwise by your package dependencies.</p>"},{"location":"resources/software/writing-ros-packages/#documentation","title":"Documentation","text":"<p>Document your package in a <code>Readme.md</code> file within the package. At a minimum, the README should clearly state the package\u2019s purpose, describe all nodes and their interfaces (subscribed and published topics, services, actions), and list all parameters.</p>"},{"location":"software/","title":"Software Overview","text":"<p>Software overview</p> <p>Expand</p> <p>This section needs additional information</p> <ul> <li>ROS2</li> <li>Interface</li> <li>Cameras</li> <li>RadCon</li> </ul>"},{"location":"software/cameras/","title":"Index","text":"<p>Expand</p> <p>This section needs additional information</p>"},{"location":"software/devops/","title":"Index","text":"<p>Expand</p> <p>This section needs additional information</p>"},{"location":"software/interface/","title":"Index","text":"<p>Expand</p> <p>This section needs additional information</p>"},{"location":"software/radcon/","title":"Index","text":"<p>Expand</p> <p>This section needs additional information</p>"},{"location":"software/ros2/autonomous-navigation/","title":"Autonomous Navigation","text":""},{"location":"software/ros2/autonomous-navigation/#sensors","title":"Sensors","text":"<p>Firo is equipped with three LiDAR scanners:</p> <ul> <li>Front horizontal LiDAR \u2013 used for navigation, mapping, and localization. </li> <li>Two vertical side LiDARs \u2013 mounted on both sides of the robot. Their data is filtered so they only detect obstacles below 1.5 m in height (slightly higher than Firo\u2019s mast).   These scanners prevent the robot from attempting to pass under low shelves or slopes.</li> </ul>"},{"location":"software/ros2/autonomous-navigation/#odometry-and-data-fusion","title":"Odometry and Data Fusion","text":"<p>Firo uses three odometry sources \u2014 wheel, LiDAR, and IMU \u2014 which are fused together:</p> Source Data Provided Wheels vx, \u03c9x LiDAR vx, \u03c9x IMU \u03c9x <p>This forms the local fusion layer. The global fusion layer also includes the position estimated by the global localization algorithm (SLAM or Nav2).</p> <p>Currently, odometry quality is acceptable but not sufficient for continuous SLAM from slam_toolbox.</p>"},{"location":"software/ros2/autonomous-navigation/#future-improvements","title":"Future Improvements","text":"<ul> <li>Make LiDAR odometry the primary source.  </li> <li>Reduce usage or enhance wheel odometry with error estimation (wheel slip is unavoidable in skid-steer robots).  </li> <li>Consider using a faster, higher-quality LiDAR, as the current one produces noisy RF2O odometry data.  </li> </ul>"},{"location":"software/ros2/autonomous-navigation/#slam","title":"SLAM","text":"<p>Firo uses the SLAM Toolbox for map building.</p> <ul> <li>Map quality is generally acceptable, though multiple mapping attempts may be needed due to odometry imperfections.  </li> <li>Currently, map building is performed as a separate step, because simultaneous SLAM and navigation require better odometry accuracy than currently available.</li> </ul>"},{"location":"software/ros2/autonomous-navigation/#navigation","title":"Navigation","text":"<p>Firo\u2019s navigation system is based on the Nav2 framework.</p> <p>The NavigateToPose action is implemented with standard recovery behaviors.</p>"},{"location":"software/ros2/autonomous-navigation/#additional-nodes","title":"Additional Nodes","text":"<ul> <li>Twist Stamper \u2013 converts <code>Twist</code> messages to <code>TwistStamped</code>, which is required by Firo\u2019s drivers.  </li> <li>Dock Approach Manager \u2013 an action server that lets users save and send dock approach pose as navigation goal.</li> </ul>"},{"location":"software/ros2/autonomous-navigation/#localization","title":"Localization","text":"<p>Due to not sufficient enough odometry quality, AMCL (Adaptive Monte Carlo Localization) is used for global localization.</p>"},{"location":"software/ros2/autonomous-navigation/#planning-and-control","title":"Planning and Control","text":"<ul> <li>Planner: Smac State Lattice (modified A* for non-circular robots)  </li> <li>Smoother: ConstrainedSmoother (suitable for Smac State Lattice)  </li> <li>Costmaps: Include data from vertical LiDARs to detect slopes and shelves.  </li> <li>Controller: MPPI (Model Predictive Path Integral) with velocity smoothing.  </li> <li>Collision Monitor: <ul> <li>Slow down by 30% if an obstacle is within 15 cm.  </li> <li>Stop completely if within 5 cm.</li> </ul> </li> </ul>"},{"location":"software/ros2/autonomous-navigation/#current-status","title":"Current Status","text":"<p>Navigation works fine:</p> <ul> <li>Path planning and dynamic obstacle avoidance are effective.  </li> <li>Two known issues:<ol> <li>Costmap shifting during rotation (likely odometry error).  </li> <li>Path following \u2013 occasionally, instead of turning in place, the robot tries to follow a curved path and fails to reach the target (likely controller cost weighting issue).</li> </ol> </li> </ul>"},{"location":"software/ros2/autonomous-navigation/#docking","title":"Docking","text":"<p>Docking is based on the ICP (Iterative Closest Point) algorithm.</p> <p>Vertical LiDAR point cloud data is used to detect and verify the docking station\u2019s shape. Detected coordinates are saved and used by the docking server, which performs docking and undocking using a PID controller.</p>"},{"location":"software/ros2/autonomous-navigation/#notes","title":"Notes","text":"<ul> <li>Start detection when the robot is about 0.5 m from the docking station.  </li> <li>Initiate docking when about 1.5 m away and facing the station.  </li> <li>The approach pose can be saved and used as a navigation goal via the Dock Approach Manager.</li> </ul> <p>Docking is still a work in progress; the detection algorithms requires further tuning and testing.</p>"}]}